NOTES ---

JAVA / SPRING SKILL TRACK OVERVIEW --
    -- Procedural Java Syntax
        -- In contrast to object oriented programming -- ex: loops, variables, conditionals, etc.
    -- Object-oriented concepts
        -- Classes and objects, in more detail on how to use those.
    -- IntelliJ IDE
        -- Listing this as its important for us to know how to use the tools that are industry standards.
    -- Spring Boot framework
        -- Spring is a very large framework, but we are only going to use a small part of it called "Boot" which lets us create web apps and such.
        -- We're using boot because it sets up a lot of the nitty gritty which allows us to spend more time on the design of classes and such.
            -- Building controllers to handle requests.
            -- Building views to present your application to a user
            -- Building persistaent models to represent the "business logic" and store data
    -- 

_____________________________________________________________________________

JAVA DEVELOPMENT KIT --
    -- Java Runtime Environment (JRE)
        -- Includes the code behind all the variable types and built-in functions
        -- Includes a Java Virtual Machine (JVM), which allows Java code to run on any platform.

    -- Java Compiler (javac)
        -- A compiler is a special type of program that translates programming language code into code that a computer can execute.
        -- First step to translating our code into "machine code".

    -- Built-In Java Virtual Machine (JVM)
        -- Makes it so that you can use it on ANY device / OS.

_____________________________________________________________________________

JAVA FOR PYTHON PROGRAMMERS ---

INTRODUCTION --
    -- Python is great for your first language because it's simple and straightforward and you can start making interesting programs nearly immediately.
    -- However, for very large programs, languages like Java and C++ are going to give you the best performance. They are more "safe" and "maintainable".
    -- Other langauges in the same category of Python ("scripting languages") are Ruby and Javascript.
    -- Java is representative of what the author calls "industrial strength" languages. C++, C, C#
    -- Java is a C style language, meaning that a lot of the syntax features are derivative of the C programming language.

COMMENTS --
    // This comment lives on a single line.
    /* This comment
    can span
    multiple lines. */

JAVA RULES --
    -- Every Java program must define a class; all code is inside a class.
    -- Everything in Java must have a type.
    -- Every Java program must have a function (or method) called "main" that has a signature of "public static void main(String[] args)"
        -- A "method signature" specifies all of the information necessary for a programmer to use the method, including, at minimum, its name and the number, types, and order of its parameters. It can also include access and static modifiers.

public class Hello {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}

LINE 1 --
    -- The first word "public" indicates to the Java compiler that this is a method that anyone can call.
        -- Java enforces several levels of security on the methods we write:
            -- public
            -- protected
            -- private

    -- The "class" keyword indicates that we are defining a class, while "Hello" is the name of the class. That is up to the programmer, and can be anything that fits within some basic rules.

    -- JAVA NAMING CONVENTIONS
        -- Package
            -- All lowercase
            -- ex. demos.java4python // org.launchcode.utilities
        -- Class
            -- Start with an uppercase letter
            -- ex. Scanner // System // Hello
        -- Method
            -- Start with a lower case letter, and use camelCase to represent multiword method names
            -- ex. nextInt() // getId()
        -- Instance variable
            -- Start with a lowercase letter and use camelCase
            -- ex. id // firstName
        -- Constant*
            -- All uppercase letters, words separated by underscores
            -- ex. MAX_INT
            -- Constants in Java are variables created using both "static" and "final" modifiers. ex: static final Double PI = 3.14159;

    -- JAVA NAMING RULES
        -- Only use letters, numbers, and the underscore character.
        -- They should always start with a letter.

    -- Java programs must be inside a class. The "Hello" class is not a very useful class since it has no instance variables and only one method. It is created out of necessity.

    -- Classes are enclosed in { and }.
        -- They also are used to surround conditionals, methods, and loops.
        -- Any section of code enclosed in a pair of such braces is referred to a "block".

LINE 2 --
    -- Start the "method definition"
    -- Indentation is not required. Similar to HTML, it's just for human readability and consistency.
    -- Java knows this is part of the "Hello" class because it is enclosed in the curly braces.

    -- "public"
        -- Similar to the use in line 1, this indicates to the Java compiler that this is a method that anyone can call.

    -- "static"
        -- Tells Java that this is a method that is part of the class, but does not belong to any one instance of the class.
            -- Shared by all instances of the class.
            -- A class is a "blueprint" for a type of object, and when we create an object based on a class, we refer to that object as an "instance" of the class (or just "instance")
        -- In Python, the kind of methods we typically wrote required an instance in order for the method to be called.
        -- With a static method, the object to the left of the "." is a class, not an instance of the class.
        -- For now, you can think of static methods the same way you think of methods in Python modules that don't require an instance.

    -- "void"
        -- Tells the Java compiler that the method "main" will not return a value.
        -- This is roughly analogous to omitting the return statement in a Python method.
        -- Every Java function must tell the compiler what kind of an object it will return. A.K.A. Everything in Java must have a "type".
        -- The special type called "void" which means nothing will be returned.

    -- "main"
        -- We have the proper name for the method: "main"
        -- The rules for names in Java are similar to the rules in Python

    -- String[] args
        -- Parameter list.
        -- In this example, we have one parameter, named "args".
        -- We also have to tell the compiler that the value of "args" is an array of strings.
            -- For the moment, you can just think of an array as being the same as a list in Python.
        -- The practical benefit of declaring that the method "main" must accept one parameter and the parameter must be an array of strings.
            -- If you call "main" somewhere else in your code and pass it an array of integers or even a single string, the compiler will flag it as an error.
        -- That doesn't happen in Python because you don't have to declare a type to the variables. And such.

LINE 3 --
    -- "System.out.println("Hello, World!);"
        -- Python and Java both use dot notation for finding names.
        -- "System" is a class.
        -- In the "System" class, we find the object named "out".
        -- The "out" object is the standard output stream for this program (typically, the command prompt.)
        -- Having located the "out" object, Java will now call the method named "println(String s)" on that object.
        -- The "println" method prints a string and adds a newline character at the end.
    
    -- "semi-colon"
        -- ";" signifies the end of a statement.
        -- Unlike Python, Java statements can span across many lines. The compiler only knows its the end of a statement when it gets to the semi-colon.
    
LINES 4 & 5 --
    -- They simply close the two blocks out.
    -- The "outer" block is the class definition.
    -- The "inner" block is the function definition.

_____________________________________________________________________________

DATA TYPES --

STATIC vs. DYNAMIC TYPING --
    -- Python is "dynamically typed" which means a variable or parameter can refer to any kind of value at any time. When the variable is used, the interpreter figures out what type it is and behaves accordingly.
    -- Java is "statically typed" which means the association between a variable or parameter and the type of value it can refer to is determined when the variable or parameter is declared. Once the declaration is made, it is illegal for it to refer to a value of any other type.

    -- WE MUST DECLARE THE TYPE OF EVERY VARIABLE AND PARAMETER. This is done by preceding the variable or parameter name with the name of its type. EX: String x = "dog"

    NOTE -- This only needs to be done on declaration. Subsequent usage does not require specifying the type and will result in an error.

    DYNAMIC -- Python, Ruby, Javascript, PHP (AKA everything you're used to. Haha.)
    STATIC -- Java, C, C++, C#, Ada

STRING --
    -- Strings in Java and Python are both "immutable".
    -- Java does not support an indexing or slicing operator. You can still do this, it's just with "method calls" instead of operators.
    -- Java does not support operator overloading.

PRIMITIVES --
    -- All of the basic data types in Python are "objects"
    -- In Java, that is not the case. Some of the most basic data types (like int, float) are not objects.
    -- The benefit of having these "primitive" data types be non-objects is that operations on the primitives are fast.
    -- It's difficult for programmers to combine objects and non-objects, so Java has evolved and now all of the non-object primitives have objectified versions called "wrapper classes".

        -- int: Integer -- ex: -5, 1024
        -- float: Float -- ex: 1.212, 3.14
        -- double: Double -- ex: 3.14159, 2.0
            -- Doubles are twice as precises (ie. can hold much longer decimal numbers) than floats
        -- char: Char -- ex: 'a', '!'
            -- A single Unicode character. Must be enclosed in single quotes '' to be a character; double-quotes "" indicate a string
        -- boolean: Boolean -- ex: true, false
            -- Note that booleans in Java are not capitalized as they are in Python.

        These aren't all of the primitive types, only the most commonly used ones that beginners are likely to encounter.

AUTOBOXING --
    -- In older versions of Java, it was the programmer's responsibility to conver back and forth from a primitive to an object.
    -- The process of converting a primitive to an object is called "boxing".
    -- The reverse process is called "unboxing".
    -- In Java 5, the compiler became smart enough to know when to convert back and forth, which is known as "autoboxing". In many situations, you can use primitive and object types interchangeably.

    -- IT'S BEST PRACTICE to use primitives whenever possible. The primary exception to this occurs when storing values in collections.

TEMP CONVERSION PROGRAM --

PYTHON --
    def main():
        fahrenheit = int(input("Enter the temperature in F: "))
        celsius = (fahrenheit - 32) * (5.0 / 9.0)
        print("The temperature in C is: ", celsius)

    if __name__ == "__main__":
        main()

JAVA --
    import java.util.Scanner;

    public class TempConv {
        public static void main(String[] args) {
            double fahrenheit;
            double celsius;
            Scanner in;

            in = new Scanner(System.in);
            System.out.println("Enter the temperature in F: ");
            fahrenheit = in.nextDouble();

            celsius = (fahrenheit - 32) * 5.0/9.0;
            System.out.println("The temperature in C is: " + celsius);
        }
    }

"import" --
    -- In Java, you can use any class that is available without having to import the class, but you must adhere to two very important conditions:
        -- 1. The "javac" and "java" commands must know that the class exists.
        -- 2. You must use the full name of the class.

    -- How does the compiler know that certain classes exist?
        -- 1. Java knows about all the classes that are defined in ".java" and ".class" files in your current working directory.
        -- 2. Java knows about all the classes that are shipped with java.
        -- 3. Java knows about all the classes that are included in your "CLASSPATH" environment variable. "CLASSPATH" can name two kinds of structures:
            -- A jar file that contains java classes. (A jar file is a "Java archive", and ends in ".jar". For now, think of it as a .zip file that contains a bunch of classes.)
            -- Another Unix directory that contains Java class files.

    -- You can think of the "import" statment as being similar to the Python "from module import xxx", but behind the scenes the two statements actually do different things.
        -- The class name in Java is very hierarchical.
            -- The full name of the "Scanner" class is actually "java.util.Scanner" The name has two parts:
                -- The first part "java.util" is called the package.
                -- The last part is the class.
        -- It is the Java class loader's responsibility to load classes into memory, not the "import" statement's.

    -- The "import" statement tells the compiler that we are going to use a shortened version of the class's name.

DECLARING VARIABLES; "double fahrenheit; double celsius; Scanner in;" --
    -- This line is saying that fahrenheit and celsius are going to reference objects that are of the type "double". And the variable "in" will reference a Scanner object.

    -- The general rule in Java is that you must decide what kind of an object your variable is going to reference and then you must declare that variable before you use it.

INPUT / OUTPUT and the SCANNER CLASS --
    -- Scanner objects make getting input from the user, a file, or even over the network relatively easy.
    -- To ask the user to input something in the command line --
        -- in = new Scanner(system.in);
            -- The Scanner object is assigned to the name "in", which we declared to be a Scanner earlier in the program.
            -- "System.in" is similar to System.out except, of course, it is used for input.
    -- You can think of a "Scanner" as a kind of "adapter" that makes low level objects easier to use.
    NOTE: As in Python, you must declare and initialize your variables in the same line.

"farhrenheit = in.nextDouble();" --
    -- On this line, we use the Scanner object to read in a number.
    -- We must convert the input to a double.
    -- "nextDouble()" is a Scanner method.

CLASS TYPES --  
    -- Any class in Java defines a type.  
    -- Class and objects are conceptually the same as in Python.
        -- A class is a template for creating objects.

    -- If I have a class "Cat" with a constructor that takes no arguments, I can declare and create a new instance of Cat using its constructor.
        PYTHON:
            my_cat = Cat()

        JAVA:
            Cat myCat = new Cat();

        Each of these statements creates a new variable that is initialized to hold a new "Cat" object. In Java, we must declare the variable's type and we precede the constructor with the "new" keyword.

    -- Variables and parameters that are of the type of a class are said to be of "reference type" as opposed to "primitive type".

REFERENCES --
    -- A variable of a reference type (such as "myCat" above) does not actually store the object in question. It just stores a "reference" to the object.
    -- When we assign a value to a reference type, as in "Cat sameCat = myCat", we are not creating a second copy of the object, but instead are creating a second "arrow" point to the same object.

ARRAYS --
    -- An array is an ordered, fixed-size collection of elements.
    -- Arrays may only store one type of object. (Unlike Python, we cannot have an array with both strings and integers.)
    -- Syntax for creating an array capable of holding 10 integers:
        int[] someInts = new int[10]
        or
        int[] someOtherInts = {1, 1, 2, 3, 5, 8}

        To create an array holding a different size, replace the number 10 with a different number.
        To create an array holding a different type, replace "int" on both sides of the argument with the desired type.
        Unlike Python, arrays in Java cannot change size once created.
        Literal expressions must be placed in curly braces.

        To access array elements, we use square brackets as with Python lists. And it's also zero-based indexing.

STATIC METHODS --
    -- In pure object-oriented languages like Java and C#, we don't have functions in the sense you're used to. For example, functions may not be declared outside of a class. Within the context of a class, functions are referred to as "methods".
    -- You are encouraged not to refer to methods as "functions" when you are talking about Java code.

    -- "static methods" behave similarly to functions as you knew them in Python.
    -- A static methods is one with the "static" keyword, as our "main" method has above.

    WARNING: Until we get into Object Oriented Programming, every method we write will have the "static" keyword. Leaving off "static" will prevent you from calling methods you define as you would like to.

    TWO CLASSES --

        public class HelloMethods {

            public static void main(String[] args) {
                String message = Message.getMessage("fr");
                System.out.println(message);
            }
        }

        public class Message {

            public static String getMessage(String lang) {

                if (lang.equals("sp")) {
                    return "Hola Mundo!";
                }
                else if (lang.equals("fr")) {
                    return "Bonjour le monde";
                }
                else {
                    return "Hello, World!";
                }
            }
        }

    WARNING: It is a rule in Java that a file containing a class marked "public" MUST be named the same as that class.

    -- "Message" class does not have a "main" method, so it cannot be run on its own. Code within the "Message" class must be called from elsewhere in order to execute.

    -- Since Java is statically typed, each method must declare its return type -- that is, the data type of what it will return -- along with the type of each parameter.

    -- To call a static method, we must use the name of the class in which it is defined, followed by ".", followed by the name of the method. EX: Message.getMessage("fr");

    -- We are able to call this method from another class because it is declared to be "public". If we wanted to restrict the method from being called by another class, we could instead use the "private" modifier.
_____________________________________________________________________________
            
CLASS NOTES ---

public class Hello {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}


-- First line is defining the class.
-- Everything in Java needs to be a "class".
    -- Unlike Python where you can just start coding.
-- Classes can be public or private.
    -- Private means only you can use them.

-- Second line
    -- This is the entry point for all standard Java applications.
    -- Defined "public."
    -- Static keyword - This defines that the method is the same per class rather than per instance
    -- Void -- This is the return type in this case "void" means we arnen't returning anything.
    -- Main -- This is the name of the main function (main function has to be named "main")
        -- There will only be one MAIN class for your application.
        -- You need it to run.
        -- Main methods have to be a public class.
    -- (String[].args) -- This is the function parameters, in this case a String arrow called "args" (short for program argument)

-- Third line
    -- System.out -- This defines that the output will go to the console or standard output.
    -- Println -- Prints a line with a carriage return (new line)
    -- All String literals must be in double quotes, unlike Python (" ")
    -- All lines must end with a semi colon.
    -- JAVA IS NOT SPACE SENSITIVE LIKE PYTHON.

FORMALITY AND STRUCTURE
    -- All code must be in a class
    -- All code must be in a method or function that has the following
        -- A name
        -- Public

STATIC vs DYNAMIC TYPING
    -- Python
        -- Name = "Hank" : Declare a variable
            -- This is an example of a dynamically typed (or type unsafe) language defining a variable, called name, to "Hank" (a string)

    -- JAVA
        -- String name = "Hank";
        -- This is an example of a statitcally typed (or type safe) language defining a variable. Must end with a semi colon.

    -- The difference between Python and Java is that you can take that name variable from the previous slide and change it.
        -- Once you declare a type of variable, the only thing you can store in there is a string. Or whatever data type you defined the variable as.

PRIMITIVES (AND THEIR OBJECT COUNTERPARTS)

-- Primitives
    -- int
        -- Integer
    -- float
        -- Float
    -- double
        -- Double
    -- char
        -- Char
    -- boolean
        -- Boolean

    -- Cannot be null
    -- Java will do something called "Autoboxing" where it will convert from the primitive to the Object form for you automatically.

    -- EG. int x=;
           integer y = Integer.valueOf(x);

IMPORTING
    -- As you have imported libraries in your Python projects, so can you import libraries (or standard JDK classes) into your Java projects
        -- For example: Import java.util.Scanner;
        -- This will allow you to use the Scanner class in your class, without it, your project will throw a ClassNotFound exception.
        -- In order to import a class into your project, it must be on the "classpath".
            -- Literally just a path where all of your classes exist.

DECLARING VARIABLES
    -- In Python, we can declare a variable without declaring what kind of variable it is.
    -- In Java, you must declare a type.

I/O AND SCANNER
    -- The java scanner class (found in java.util.Scanner) allows for input and ouput.
    -- E.g. Scanner in = new Scanner(System.in)
        -- New scanner instance
        -- This declares a new scanner instance that takes input from the system.in or the console for user input. It could also take input from a file, stream, etc.

        -- Once declared, we can use the scanner to accept input from the user, please note, though, that you must know what kind of input to expect (String, double, int, etc)
            -- Eg. Fahrenheit = in.nextDouble(); -- This accepts a double input from the user and stores it in Fahrenheit
                -- A good practice is to take all user input in as Strings and just convert them to the correct datatype later.

INSTANTIATING OBJECTS (PYTHON & JAVA)
-- When creating class in Python and Java, it's essentially the same. You want to have data and methods for that data represented.
-- Constructing a new cat in Python: my_cat = Cat()
-- Constructing a new cat in Java: Cat myCat = new Cat();

REFERENCES IN JAVA
-- int catAge = 11
    -- Declare a new int (primitive) with catAge set to 11
-- Cat myCat = new Cat();
    -- Instantiate a new cat called myCat
-- Cat sameCat = myCat();
    -- Create a new reference called samCat that "points" to myCat

-- DON'T DO THIS, THOUGH.

ARRAYS IN JAVA
-- Just like Python, we have arrays to store a collection of items (objects, primitives)
-- However, unlike in Python, we can only store 1 type of object in an given array.
-- int[] someints = new int[10];
    -- Declares an array for ints to saize 10
-- int[] sometOtherInts = {1, 1, 2, 3, 5, 8}
    -- Declares and initializes an array with values 1, 1, 2, 3, 5, 8
-- To access a value in an array, we use square brackets (just like Python) with base 0
    -- eg. int val = someOtherInts[4];
        -- Sets val to 5

STATIC METHODS
-- Static methods are very similar to functions in Python, they can be called directly without instantiating (or constructing) any objects.
-- However, that doesn't mean they don't need to be put in a class
-- Static methods are called like so: ClassName.Method(parameters);
