NOTES ---

JAVA DEVELOPMENT KIT --
    -- Java Runtime Environment (JRE)
        -- Includes the code behind all the variable types and built-in functions
        -- Includes a Java Virtual Machine (JVM), which allows Java code to run on any platform.

    -- Java Compiler (javac)
        -- A compiler is a special type of program that translates programming language code into code that a computer can execute.
        -- First step to translating our code into "machine code".

    -- Built-In Java Virtual Machine (JVM)
        -- Makes it so that you can use it on ANY device / OS.

JAVA FOR PYTHON PROGRAMMERS ---

INTRODUCTION --
    -- Python is great for your first language because it's simple and straightforward and you can start making interesting programs nearly immediately.
    -- However, for very large programs, languages like Java and C++ are going to give you the best performance. They are more "safe" and "maintainable".
    -- Other langauges in the same category of Python ("scripting languages") are Ruby and Javascript.
    -- Java is representative of what the author calls "industrial strength" languages. C++, C, C#
    -- Java is a C style language, meaning that a lot of the syntax features are derivative of the C programming language.

COMMENTS --
    // This comment lives on a single line.
    /* This comment
    can span
    multiple lines. */

JAVA RULES --
    -- Every Java program must define a class; all code is inside a class.
    -- Everything in Java must have a type.
    -- Every Java program must have a function (or method) called "main" that has a signature of "public static void main(String[] args)"
        -- A "method signature" specifies all of the information necessary for a programmer to use the method, including, at minimum, its name and the number, types, and order of its parameters. It can also include access and static modifiers.

        

CLASS NOTES ---

public class Hello {
    public static void main(String[] args) {
        System.out.printIn("Hello, World!");
    }
}


-- First line is defining the class.
-- Everything in Java needs to be a "class".
    -- Unlike Python where you can just start coding.
-- Classes can be public or private.
    -- Private means only you can use them.

-- Second line
    -- This is the entry point for all standard Java applications.
    -- Defined "public."
    -- Static keyword - This defines that the method is the same per class rather than per instance
    -- Void -- This is the return type in this case "void" means we arnen't returning anything.
    -- Main -- This is the name of the main function (main function has to be named "main")
        -- There will only be one MAIN class for your application.
        -- You need it to run.
        -- Main methods have to be a public class.
    -- (String[].args) -- This is the function parameters, in this case a String arrow called "args" (short for program argument)

-- Third line
    -- System.out -- This defines that the output will go to the console or standard output.
    -- PrintIN -- Prints a line with a carriage return (new line)
    -- All String literals must be in double quotes, unlike Python (" ")
    -- All lines must end with a semi colon.
    -- JAVA IS NOT SPACE SENSITIVE LIKE PYTHON.

FORMALITY AND STRUCTURE
    -- All code must be in a class
    -- All code must be in a method or function that has the following
        -- A name
        -- Public

STATIC vs DYNAMIC TYPING
    -- Python
        -- Name = "Hank" : Declare a variable
            -- This is an example of a dynamically typed (or type unsafe) language defining a variable, called name, to "Hank" (a string)

    -- JAVA
        -- String name = "Hank";
        -- This is an example of a statitcally typed (or type safe) language defining a variable. Must end with a semi colon.

    -- The difference between python and Java is that you can take that name variable from the previous slide and change it.
        -- Once you declare a type of variable, the only thing you can store in there is a string. Or whatever data type you defined the variable as.

PRIMITIVES (AND THEIR OBJECT COUNTERPARTS)

-- Primitives
    -- int
        -- Integer
    -- float
        -- Float
    -- double
        -- Double
    -- char
        -- Char
    -- boolean
        -- Boolean

    -- Cannot be null
    -- Java will do something called "Autoboxing" where it will convert from the primitive to the Object form for you automatically.

    -- EG. int x=;
           integer y = Integer.valueOf(x);

IMPORTING
    -- As you have imported libraries in your Python projects, so can you import libraries (or standard JDK classes) into your Java projects
        -- For example: Import java.util.Scanner;
        -- This will allow you to use the Scanner class in your class, without it, your projecrt will through a ClassNOtFound exception.
        -- In order to import a class into your proejct, it must be on the "classpath".
            -- Literally just a path where all of your classes exist.

DECLARING VARIABLES
    -- In Python, we can declare a variable without declaring what kind of variable it is.
    -- In Java, you must declare a type.

I/O AND SCANNER
    -- The java scanner class (found in java.util.Scanner) allows for input and ouput.
    -- E.g. Scanner in = new Scanner(System.in)
        -- New scanner instance
        -- This declares a new scanner instance that takes input from the system.in or the console for user input. It could also take input from a file, stream, etc.

        -- Once declared, we can use the scanner to accept input from the user, please note, though, that you must know what kind of input to expect (String, double, int, etc)
            -- Eg. Fahrenheit = in.newtDouble(); -- This accepts a double input from the user and stores it in Fahrenheit
                -- A good practice is to take all user input in as Strings and just convert them to the correct datatype later.

INSTANTIATING OBJECTS (PYTHON & JAVA)
-- When creating class in Python and Java, it's essentially the same. You want to have data and methods for that data represented.
-- Constructing a new cat in Python: my_cat = Cat()
-- Constructing a new cat in Java: Cat myCat = new Cat();

REFERENCES IN JAVA
-- int catAge = 11
    -- Declare a new int (primitive) with catAge set to 11
-- Cat myCat = new Cat();
    -- Instantiate a new cat called myCat
-- Cat sameCat = myCat();
    -- Create a new reference called samCat that "points" to myCat

-- DON'T DO THIS, THOUGH.

ARRAYS IN JAVA
-- Just like Python, we have arrays to store a collection of items (objects, primitives)
-- However, unlike in Python, we can only store 1 type of object in an given array.
-- int[] someints = new int[10];
    -- Declares an array for ints to saize 10
-- int[] sometOtherInts = {1, 1, 2, 3, 5, 8}
    -- Declares and initializes an array with values 1, 1, 2, 3, 5, 8
-- To access a value in an array, we use square brackets (just like Python) with base 0
    -- eg. int val = someOtherInts[4];
        -- Sets val to 5

STATIC METHODS
-- Static methods are very similar to functions in Python, they can be called directly without instantiating (or constructing) any objects.
-- However, that doesn't mean they don't need to be put in a class
-- Static methods are called like so: ClassName.Method(parameters);
